name: Postman API Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with Docker Compose
      working-directory: ./backend
      env:
        DB_USER: ${{ secrets.DB_USER || 'testuser' }}
        DB_PASS: ${{ secrets.DB_PASS || 'testpass' }}
        DB_HOST: ${{ secrets.DB_HOST || 'db' }}
        DB_PORT: ${{ secrets.DB_PORT || '5432' }}
        DB_NAME: ${{ secrets.DB_NAME || 'testdb' }}
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
      run: |
        # Start the database first
        docker compose up -d db
        
        # Wait for database to be ready
        echo "Waiting for database to be ready..."
        timeout 30 bash -c 'until docker compose exec db pg_isready -U $DB_USER -d $DB_NAME; do sleep 2; done'
        
        # Run database seeding
        echo "Seeding database..."
        docker compose run --rm seed
        
        # Start the backend service
        docker compose up -d app
        
        # Wait for backend to be ready
        echo "Waiting for backend to start..."
        timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'
        
        # Verify backend is responding
        curl -f http://localhost:3000 || exit 1
        echo "Backend is ready!"

    - name: Install Newman
      run: npm install -g newman

    - name: Run Postman tests
      working-directory: ./backend
      run: |
        newman run tests/postman_collection.json \
          -e tests/postman_environment.json \
          --reporters cli,json \
          --reporter-json-export test-results.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1   # change to your region

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to ECR
      working-directory: ./backend
      run: |
        IMAGE_REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/my-backend"
        IMAGE_TAG=${{ github.sha }}

        docker build -t $IMAGE_REPO:$IMAGE_TAG -f Dockerfile .
        docker push $IMAGE_REPO:$IMAGE_TAG

        docker tag $IMAGE_REPO:$IMAGE_TAG $IMAGE_REPO:latest
        docker push $IMAGE_REPO:latest
                 

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: postman-test-results
        path: backend/test-results.json

    - name: Stop services
      if: always()
      working-directory: ./backend
      run: docker compose down

    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const results = JSON.parse(fs.readFileSync('backend/test-results.json', 'utf8'));
            const stats = results.run.stats;
            const failures = results.run.failures;
            
            let comment = `## 🧪 Postman Test Results\n\n`;
            comment += `**Summary:**\n`;
            comment += `- ✅ Passed: ${stats.requests.total - stats.requests.failed}\n`;
            comment += `- ❌ Failed: ${stats.requests.failed}\n`;
            comment += `- ⏱️ Total time: ${stats.timings.completed - stats.timings.started}ms\n\n`;
            
            if (failures.length > 0) {
              comment += `**Failed Tests:**\n`;
              failures.forEach(failure => {
                comment += `- ${failure.error.name}: ${failure.error.message}\n`;
              });
            } else {
              comment += `🎉 All tests passed!`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not parse test results:', error.message);
          }